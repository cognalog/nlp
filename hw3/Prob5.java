import java.io.*;
import java.util.HashMap;

public class Prob5{
	static String eFile;
	static String fFile;
	static String tFile;
	static PrintStream stdout = System.out;

	/*
	* generates keys for a table of q's, t's, or counts
	*/
	public static String makeKey(String ... args){
		String key = "";
		for(int i = 0; i < args.length; i++){
			key += (i + 1 == args.length) ? args[i] : args[i] + "_";
		}
		return key;
	}

	/*
	* gets initial t values from a file generated by Prob4
	*/
	public static HashMap<String, HashMap<String, Double>> getTs() throws IOException{
		BufferedReader tReader = new BufferedReader(new FileReader(tFile));
		HashMap<String, HashMap<String, Double>> params = new HashMap();
		String line;
		while((line = tReader.readLine()) != null){
			String[] pair = line.split("~");
			String[] words = pair[0].split("_");
			if(!params.containsKey(words[1]))
				params.put(words[1], new HashMap());//switch to e-major
			params.get(words[1]).put(words[0], Double.parseDouble(pair[1]));
		}

		return params;
	}

	public static void increment(HashMap<String, Double> counts, double by, String key){
		if(counts.containsKey(key))
			counts.put(key, counts.get(key) + by);
		else
			counts.put(key, by);
	}
	
	public static double[][][][] emAlg(int iterations) throws IOException{
		double[][][][] qParams = new double[50][50][50][50]; //assumes max sentence length of 50 words
		HashMap<String, HashMap<String, Double>> tParams = getTs();
		double[][][][] qCounts = new double[51][50][50][50];
		HashMap<String, HashMap<String, Double>> tCounts = new HashMap();

		for(int its = 1; its <= iterations; its++){
			//reset all stored counts to 0
			for(String e : tParams.keySet()){
				tCounts.put(e, new HashMap());
				tCounts.get(e).put("~", 0.0);
				for(String f : tParams.get(e).keySet()){
					tCounts.get(e).put(f, 0.0);
				}
			}
			qCounts = new double[51][50][50][50];
			BufferedReader eReader = new BufferedReader(new FileReader(eFile));
			BufferedReader fReader = new BufferedReader(new FileReader(fFile));
			String eline, fline;
			int k = 1;
			while((eline = eReader.readLine()) != null){
				if(k % 500 == 0)
					stdout.println("on line "+k);
				String[] eWords = eline.split(" ");
				String[] fWords = fReader.readLine().split(" ");//assumes corpora are equally long
				int l = eWords.length;
				int m = fWords.length;
				for(int i = 0; i < fWords.length; i++){
					//calculate denominator for delta
					double denom = 0;
					for(int j = 0; j < eWords.length; j++){
						if(qParams[j][i][l][m] == 0)
							qParams[j][i][l][m] = 1.0 / (eWords.length + 1);
						//stdout.println(tParams.get());
						denom += qParams[j][i][l][m] * tParams.get(eWords[j]).get(fWords[i]);//assumes this t param has been calculated in Prob4
					}
					for(int j = 0; j < eWords.length; j++){
						String e = eWords[j];
						String f = fWords[i];
						//calculate delta
						double delta = (denom > 0) ? qParams[j][i][l][m] * tParams.get(e).get(f) / denom : 0;
						//increment counts by delta
						tCounts.get(e).put(f, tCounts.get(e).get(f) + delta); //c(f,e)
						tCounts.get(e).put("~", tCounts.get(e).get("~") + delta); //c(e)
						qCounts[j][i][l][m] += delta; //c(j,i,l,m)
						qCounts[50][i][l][m] += delta; //c(i,l,m)
						//update q and t
						tParams.get(e).put(f, tCounts.get(e).get(f) / tCounts.get(e).get("~"));
						qParams[j][i][l][m] = qCounts[j][i][l][m] / qCounts[50][i][l][m];
					}
				}
				k++;
			}
		}
		//finally...
		return qParams;
	}

	public static void main(String[] args) throws IOException{
		if(args.length != 3){
			stdout.println("usage: java Prob5 <english_corpus> <foreign_corpus> <tParams_file>");
			return;
		}

		eFile = args[0];
		fFile = args[1];
		tFile = args[2];
		double time = System.currentTimeMillis();
		emAlg(1);
		stdout.println((System.currentTimeMillis() - time) / 60000);
		/*int i = 0;
		HashMap<String, Double> params = emAlg(1);
		for(String k : params.keySet()){
			if(i >= 10)
				break;
			stdout.println(k+": "+params.get(k));
			i++;
		}*/
	}
}